{"pages":[{"title":"关于","text":"k_arthur4 异或星人 异或星领主 算法竞赛蒟蒻 ICPC铁牌选手","link":"/about/index.html"}],"posts":[{"title":"CodeForces CGR#1 A B C D E F","text":"A. Parity 题意：给定一个多项式，判断值的奇偶，第 $i$ 项为 $a_i \\cdot b^{k-i} $。 解法一：直接模拟，保持对 $2$ 取模。解法二：判断 $base$ 和最后一项的奇偶性。 123456789101112131415#include &lt;bits/stdc++.h&gt;using namespace std;int base, k, val, x;int main(){ cin &gt;&gt; base &gt;&gt; k; for (int i = 1; i &lt;= k; ++i){ cin &gt;&gt; x; val = val * base + x; val %= 2; } cout &lt;&lt; (val &amp; 1 ? \"odd\" : \"even\") &lt;&lt; endl; return 0;} B. Tape 题意：一根木棍，分成大小为 $1$ 的 $m$ 段区间，上有 $n$ 个裂缝，要求使用不超过 $k$ 条胶布覆盖所有裂缝。问最短使用多少胶布。 可以认为有 $n$ 个节点的图，用 $n-k$ 条边连接成 $k$ 个联通块，贪心取前 $n-k$ 个最短的区间，加上必须覆盖的 $n$ 个区间。 1234567891011121314151617181920#include &lt;bits/stdc++.h&gt;using namespace std;const int N(1e5 + 10);int n, m, k;int b[N];priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq;int main(){ cin &gt;&gt; n &gt;&gt; m &gt;&gt; k; for (int i = 1; i &lt;= n; ++i) cin &gt;&gt; b[i]; for (int i = 2; i &lt;= n; ++i) pq.push(b[i] - b[i-1] - 1); int ans(n); for (int i = 0; i &lt; n - k; ++i) { ans += pq.top(); pq.pop(); } cout &lt;&lt; ans &lt;&lt; endl; return 0;} C. Meaningless Operations 题意：给定 $a$ 求 $f(a) = \\max_{0 &lt; b &lt; a}{gcd(a \\oplus b, a \\&amp; b)}$ 对 $a$ 的二进制表示中每一位取反，使 $a \\oplus b = 2 ^ n - 1$，$a \\&amp; b = 0$，使两数异或值最大，按位与值等于 $0$，使结果最大化。特例：当 $a$ 为 $2$ 的幂次减 $1$ 时，$b$ 不可取 $0$，贪心取小于 $a$ 的最大因子。 p.s. 内建函数 __builtin_popcountll() 用于统计二进制表示中 $1$ 的个数。 1234567891011121314151617181920212223242526272829#include &lt;bits/stdc++.h&gt;#define CaseT int T;cin &gt;&gt; T;for(int cas=0; cas &lt; T; ++cas)using namespace std;int a;int bitn(int x){//判断二进制最高位 int res(0); while(x) res++, x &gt;&gt;= 1; return res;}int main(){ CaseT{ cin &gt;&gt; a; if(__builtin_popcountll(a) != bitn(a)) { cout &lt;&lt; (1 &lt;&lt; bitn(a)) - 1 &lt;&lt; endl; } else { int ans(1); for (int i = 2; i * i &lt;= a; ++i) if(a % i == 0) { ans = a / i; break; } cout &lt;&lt; ans &lt;&lt; endl; } }}","link":"/2019/02/23/CF-CGR-1/"}],"tags":[{"name":"CF Rounds","slug":"CF-Rounds","link":"/tags/CF-Rounds/"},{"name":"数据结构","slug":"数据结构","link":"/tags/数据结构/"},{"name":"动态规划","slug":"动态规划","link":"/tags/动态规划/"},{"name":"数学","slug":"数学","link":"/tags/数学/"}],"categories":[{"name":"ACM","slug":"ACM","link":"/categories/ACM/"},{"name":"比赛题解","slug":"ACM/比赛题解","link":"/categories/ACM/比赛题解/"}]}